// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Match initial snapshot 1`] = `
<React.Fragment
  enableReinitialize={true}
  initialValues={
    Object {
      "disclaimer": false,
      "haveSocialSecurityNumber": true,
      "ssn": null,
    }
  }
>
  <ForwardRef(render)>
    You're almost done, 
    Chakib
    !
  </ForwardRef(render)>
  <ForwardRef(render)>
    To finish qualifying for this apartment, your Social Security number will be used for a background check.
  </ForwardRef(render)>
  <img
    alt="portfolio"
    src="portfolio.png"
  />
  <br />
  <br />
  <Formik
    enableReinitialize={false}
    isInitialValid={false}
    onSubmit={[Function]}
    validateOnBlur={true}
    validateOnChange={true}
    validationSchema={
      ObjectSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_defaultDefault": [Function],
        "_deps": Array [],
        "_excludedEdges": Array [],
        "_exclusive": Object {},
        "_mutate": undefined,
        "_nodes": Array [
          "disclaimer",
          "haveSocialSecurityNumber",
          "ssn",
        ],
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "object",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "fields": Object {
          "disclaimer": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "required": true,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
          },
          "haveSocialSecurityNumber": BooleanSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {},
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "boolean",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [],
            "transforms": Array [
              [Function],
            ],
          },
          "ssn": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [
              Condition {
                "fn": [Function],
                "refs": Array [
                  Reference {
                    "getter": [Function],
                    "isContext": false,
                    "isSibling": true,
                    "isValue": false,
                    "key": "haveSocialSecurityNumber",
                    "map": undefined,
                    "path": "haveSocialSecurityNumber",
                  },
                ],
              },
            ],
            "_deps": Array [
              "haveSocialSecurityNumber",
            ],
            "_exclusive": Object {
              "undefined": false,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
          },
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
      }
    }
  >
    [Function]
  </Formik>
</React.Fragment>
`;
