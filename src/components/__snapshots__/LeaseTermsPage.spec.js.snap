// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders leasing pricing disclaimer if unit and lease-start_date and lease_term are set 1`] = `
<Context.Provider
  value={
    Object {
      "dirty": false,
      "errors": Object {},
      "handleBlur": [Function],
      "handleChange": [Function],
      "handleReset": [Function],
      "handleSubmit": [Function],
      "initialValues": Object {
        "lease_start_date": 2019-08-15T04:00:00.000Z,
        "lease_term": 12,
        "unit": 123,
      },
      "isSubmitting": false,
      "isValid": false,
      "isValidating": false,
      "registerField": [Function],
      "resetForm": [Function],
      "setError": [Function],
      "setErrors": [Function],
      "setFieldError": [Function],
      "setFieldTouched": [Function],
      "setFieldValue": [Function],
      "setFormikState": [Function],
      "setStatus": [Function],
      "setSubmitting": [Function],
      "setTouched": [Function],
      "setValues": [Function],
      "status": undefined,
      "submitCount": 0,
      "submitForm": [Function],
      "touched": Object {},
      "unregisterField": [Function],
      "validate": undefined,
      "validateField": [Function],
      "validateForm": [Function],
      "validateOnBlur": true,
      "validateOnChange": true,
      "validationSchema": ObjectSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_defaultDefault": [Function],
        "_deps": Array [],
        "_excludedEdges": Array [],
        "_exclusive": Object {
          "is-unit-available-for-date": false,
        },
        "_mutate": undefined,
        "_nodes": Array [
          "lease_term",
          "unit",
          "lease_start_date",
        ],
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "object",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "fields": Object {
          "lease_start_date": DateSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "required": true,
            },
            "_mutate": undefined,
            "_nullable": true,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "date",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
          },
          "lease_term": SchemaType {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "required": true,
            },
            "_mutate": undefined,
            "_nullable": true,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "mixed",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
            ],
            "transforms": Array [],
          },
          "unit": ObjectSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_defaultDefault": [Function],
            "_deps": Array [],
            "_excludedEdges": Array [],
            "_exclusive": Object {
              "required": true,
            },
            "_mutate": undefined,
            "_nodes": Array [],
            "_nullable": true,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "object",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "fields": Object {},
            "tests": Array [
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
          },
        },
        "tests": Array [
          [Function],
        ],
        "transforms": Array [
          [Function],
        ],
      },
      "values": Object {
        "lease_start_date": 2019-08-15T04:00:00.000Z,
        "lease_term": 12,
        "unit": 123,
      },
    }
  }
>
  <form
    autoComplete="off"
    className="text-left"
    onSubmit={[Function]}
  >
    <div
      className="css-rlps7"
    >
      <ForwardRef(WithStyles)
        container={true}
        spacing={3}
      >
        <ForwardRef(WithStyles)
          item={true}
          xs={6}
        >
          <WrappedKeyboardPicker
            KeyboardButtonProps={
              Object {
                "aria-label": "change date",
              }
            }
            allowKeyboardControl={true}
            clearable={true}
            disablePast={true}
            disabled={false}
            error={false}
            format="MM/dd/yyyy"
            fullWidth={true}
            helperText={false}
            id="move-in-date"
            invalidDateMessage="Invalid Date Format"
            label="Move In Date"
            maxDate={2100-01-01T00:00:00.000Z}
            maxDateMessage="Date should not be after maximal date"
            minDate={1605070800000}
            minDateMessage="Date should not be before minimal date"
            onBlur={[Function]}
            onChange={[Function]}
            openTo="date"
            placeholder="mm/dd/yyyy"
            value={2019-08-15T04:00:00.000Z}
            views={
              Array [
                "year",
                "date",
              ]
            }
          />
        </ForwardRef(WithStyles)>
        <ForwardRef(WithStyles)
          item={true}
          xs={6}
        >
          <AvailableUnitsSelector
            disabled={false}
            error={false}
            errors={Object {}}
            helperText={false}
            initialValue={123}
            update={[Function]}
          />
        </ForwardRef(WithStyles)>
        <ForwardRef(WithStyles)
          item={true}
          xs={12}
        >
          <AvailableLeaseTermsSelector
            handleChange={[Function]}
            isPrimaryApplicant={true}
            leaseStartDate={2019-08-15T04:00:00.000Z}
            leaseTerm={12}
          />
        </ForwardRef(WithStyles)>
      </ForwardRef(WithStyles)>
    </div>
    <React.Fragment>
      <PriceBreakdown
        application={
          Object {
            "lease_start_date": "2019-8-15",
            "lease_term": 12,
            "unit": 123,
          }
        }
        category="lease_terms"
        leaseTerm={12}
        moveInDate={2019-08-15T04:00:00.000Z}
        onError={[Function]}
        onSuccess={[Function]}
        selectedOptions={Object {}}
      />
      <div
        className="css-1rqqgu5"
      >
        test disclaimer
      </div>
    </React.Fragment>
    <ActionButton
      color="primary"
      disabled={false}
      marginBottom={20}
      marginTop={31}
      successGreen={false}
      variant="contained"
    >
      Continue
    </ActionButton>
  </form>
</Context.Provider>
`;
